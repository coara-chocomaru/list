name: Demangle

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  demangle:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Python demangler
        run: |
          python -m pip install --upgrade pip
          pip install cxxfilt

      - name: Demangle all .txt recursively and write .dec.txt and .decd.txt
        run: |
          python - <<'PY'
          import re
          from pathlib import Path
          import cxxfilt
          import sys

          root = Path('.')

          # Conservative regex: start at _Z and take until whitespace or common separators.
          pattern = re.compile(r'(_Z[^\s,;()\[\]\\"\'<>]+)')

          produced_dec = []
          produced_decd = []
          errors = []

          for p in sorted(root.rglob('*.txt')):
              # Skip files that are already demangled outputs (i.e. already *.dec.txt or *.decd.txt)
              if p.name.endswith('.dec.txt') or p.name.endswith('.decd.txt'):
                  continue
              try:
                  text = p.read_text(encoding='utf-8', errors='ignore')
              except Exception as e:
                  errors.append(f"READ_ERROR: {p}: {e}")
                  continue

              matches = [m.group(1) for m in pattern.finditer(text)]
              
              # For .dec.txt (mangled | demangled)
              outname_dec = p.with_name(p.stem + '.dec.txt')
              try:
                  with outname_dec.open('w', encoding='utf-8', errors='ignore') as fo:
                      fo.write("Mangled Name | Demangled Name\n")
                      fo.write("------------- | --------------\n")
                      for m in matches:
                          try:
                              dem = cxxfilt.demangle(m)
                          except Exception as e:
                              dem = f"<demangle_error: {e}>"
                          fo.write(f"{m} | {dem}\n")
                  produced_dec.append(str(outname_dec))
              except Exception as e:
                  errors.append(f"WRITE_ERROR: {outname_dec}: {e}")
              
              # For .decd.txt (demangled only)
              outname_decd = p.with_name(p.stem + '.decd.txt')
              try:
                  with outname_decd.open('w', encoding='utf-8', errors='ignore') as fo:
                      for m in matches:
                          try:
                              dem = cxxfilt.demangle(m)
                          except Exception as e:
                              dem = f"<demangle_error: {e}>"
                          fo.write(f"{dem}\n")
                  produced_decd.append(str(outname_decd))
              except Exception as e:
                  errors.append(f"WRITE_ERROR: {outname_decd}: {e}")

          # Report
          if produced_dec:
              print("Produced .dec.txt files:")
              for f in produced_dec:
                  print(" -", f)
          else:
              print("No .txt files found to process (or all were already .dec.txt).")

          if produced_decd:
              print("Produced .decd.txt files:")
              for f in produced_decd:
                  print(" -", f)
          else:
              print("No .txt files found to process (or all were already .decd.txt).")

          if errors:
              print("\nErrors encountered:", file=sys.stderr)
              for e in errors[:50]:
                  print(" -", e, file=sys.stderr)
          PY

      - name: List produced .dec.txt and .decd.txt and preview
        run: |
          shopt -s globstar nullglob
          files_dec=( **/*.dec.txt )
          files_decd=( **/*.decd.txt )
          total_files=$(( ${#files_dec[@]} + ${#files_decd[@]} ))
          if [ $total_files -eq 0 ]; then
            echo "No .dec.txt or .decd.txt files produced."
            exit 0
          fi
          if [ ${#files_dec[@]} -gt 0 ]; then
            echo "Produced ${#files_dec[@]} .dec.txt files:"
            for f in "${files_dec[@]}"; do
              ls -l "$f"
            done
          fi
          if [ ${#files_decd[@]} -gt 0 ]; then
            echo "Produced ${#files_decd[@]} .decd.txt files:"
            for f in "${files_decd[@]}"; do
              ls -l "$f"
            done
          fi
          echo ""
          echo "Preview: first 20 lines of each produced .dec.txt and .decd.txt (or until EOF):"
          for f in "${files_dec[@]}"; do
            echo "---- $f ----"
            head -n 20 "$f" || true
          done
          for f in "${files_decd[@]}"; do
            echo "---- $f ----"
            head -n 20 "$f" || true
          done

      - name: Create demangled_outputs.zip (if any)
        run: |
          shopt -s globstar nullglob
          files_dec=( **/*.dec.txt )
          files_decd=( **/*.decd.txt )
          total_files=$(( ${#files_dec[@]} + ${#files_decd[@]} ))
          if [ $total_files -gt 0 ]; then
            zip -r demangled_outputs.zip "${files_dec[@]}" "${files_decd[@]}"
            echo "Created demangled_outputs.zip containing $total_files files."
          else
            echo "No .dec.txt or .decd.txt files to zip."
          fi

      - name: Upload artifact (zip only to avoid duplication)
        uses: actions/upload-artifact@v4
        with:
          name: demangled-outputs
          path: demangled_outputs.zip
